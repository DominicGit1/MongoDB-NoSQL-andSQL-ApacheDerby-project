// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('schoolNOSQLversion');
db.therapists.drop();
db.patients.drop();
db.therapies.drop();
db.sessions.drop();//query 2 tables, and search for select columns like first name, street so on
t_id1 = ObjectId()//research triggers 
t_id2 = ObjectId()//this is manual referencing. Set a id that you can reference in another document later in the code. Can save on
t_id3 = ObjectId()//time searching for the therapist id if we already have the idea hard coded into our initial sessions
db.createCollection("therapies");
db.therapists.insertMany([
  {'_id': t_id1,'therapist_id': 1, 'First_Name': 'John', 'Last_Name': 'Smith', 'Street': 'Middle of nowhere 12345','City': 'Dustville','State':'Oklahoma','Zip':'12345'},
  {'_id': t_id2,'therapist_id': 2, 'First_Name': 'Abe', 'Last_Name': 'Newell', 'Street': 'Middle of nowhere 12345','City': 'Dustville','State':'Oklahoma','Zip':'12345'},
  {'_id': t_id3,'therapist_id': 3, 'First_Name': 'Erik', 'Last_Name': 'Fielder', 'Street': 'Middle of nowhere 12345','City': 'Dustville','State':'Oklahoma','Zip':'12345'}
])
p_id1 = ObjectId()//for adding new sessions later on, we would probably have to use the find command to find this id and then connect
p_id2 = ObjectId()//to the session
p_id3 = ObjectId()
//db.patients.insertOne({'_id':1})
db.patients.insertMany([
  {'_id': p_id1,'patient_number_id': 1, 'First_Name': 'Sociopath', 'Last_Name': 'Evil', 'Street': 'Middle of nowhere 12345','City': 'Dustville','State':'Oklahoma','Zip':'12345','Balance':1000},
  {'_id': p_id2,'patient_number_id': 2, 'First_Name': 'Mental', 'Last_Name': 'Issues', 'Street': 'Middle of nowhere 12345','City': 'Dustville','State':'Oklahoma','Zip':'12345','Balance':1500},
  {'_id': p_id3,'patient_number_id': 3, 'First_Name': 'Seek', 'Last_Name': 'Help', 'Street': 'Middle of nowhere 12345','City': 'Dustville','State':'Oklahoma','Zip':'12345','Balance':500}
])
db.therapies.insertMany([//This would need to be commented out if the trigger was working
  {'therapist_code': 1, 'Description':'What happened.', 'Billable_Unit': '500$'},
  {'therapist_code': 2, 'Description':'What happened.', 'Billable_Unit': '500$'},
  {'therapist_code': 3, 'Description':'What happened.', 'Billable_Unit': '500$'}
])
const util = require('util');
db.sessions.insertMany([//i just set each therapist to be in a session with their corresponding patient who holds the same id number
  {'therapist_id': t_id1,'patient_number_id': p_id1,'Session_Date': new Date(),'Session_Length': '2 hours','Session_number': 1},
  {'therapist_id': t_id2,'patient_number_id': p_id2,'Session_Date': new Date(),'Session_Length': '2 hours','Session_number': 2},
  {'therapist_id': t_id3,'patient_number_id': p_id3,'Session_Date': new Date(),'Session_Length': '2 hours','Session_number': 3},
])
//print(`${util.inspect(db.therapists.find().hasNext() ? db.therapists.find().next() : null)}`);
const myCursor = db.therapists.find();
const myDocument = myCursor.hasNext() ? myCursor.next() : null;
console.log(`${util.inspect(myCursor.toArray())}`);
print("Printed out therapists table.");
myCursor = db.patients.find();
myDocument = myCursor.hasNext() ? myCursor.next() : null;
console.log(`${util.inspect(myCursor.toArray())}`);
print("Printed out patients table.");
myCursor = db.therapies.find();
//myDocument = myCursor.hasNext() ? myCursor.next() : null;
myCursor.forEach((doc) => { console.log(`${util.inspect(doc)}`); });
print("Printed out therapies table.");
myCursor = db.sessions.find();
myCursor.forEach((doc) => { console.log(`${util.inspect(doc)}`); });
print("Printed out sessions table.");
myCursor = db.sessions.find({'therapist_id': t_id1});
//https://docs.mongodb.com/manual/reference/method/db.collection.find/#mongodb-method-db.collection.find
myCursor.forEach((doc) => { console.log(`${util.inspect(doc)}`); });
print("Printed out sessions table where therapist_id = 1.");
myCursor = db.therapists.find({'Last_Name': { $regex: /e/}});
//https://docs.mongodb.com/manual/reference/operator/query/regex/#mongodb-query-op.-regex
//use ^ like /^e/ to search for a starting character or $ like /$e/ to search for a name ending in e
myCursor.forEach((doc) => { console.log(`${util.inspect(doc)}`); });
print("Printed out therapists table where last name has a e in it.");
myCursor = db.patients.find({'patient_number_id': { $in: [1,3]}});
//https://docs.mongodb.com/manual/reference/operator/query/in/#mongodb-query-op.-in
myCursor.forEach((doc) => { console.log(`${util.inspect(doc)}`); });
print("Printed out patients table where the patient_number_id is either 1 or 3.");
myCursor = db.patients.find({'Balance': { $gte: 1000, $lte: 1500}});
//https://docs.mongodb.com/manual/reference/operator/query/#std-label-query-selectors
myCursor.forEach((doc) => { console.log(`${util.inspect(doc)}`); });
print("Printed out patients table where the Balance is equal or greater than 1000 and less than or equal to 1500.");
myCursor = db.patients.find().sort({'Balance': 1}); //1 is for ascending, -1 is for decending. Can do multiple orders like
//sort({'Balance': 1,'patient_number_id:-1}) Balance is sorted ascending while patient number is descending
//https://docs.mongodb.com/manual/reference/method/cursor.sort/#std-label-sort-asc-desc
myCursor.forEach((doc) => { console.log(`${util.inspect(doc)}`); });
print("Printed out patients table where the Balance is sorted in ascending order.");

//myCursor.forEach((doc) => { console.log(`${util.inspect(doc)}`); });
//console.log(`${util.inspect(db.sessions.find().hasNext() ? db.sessions.find().next() : null)}`);
//print("Printed out sessions table.");



//I didn't put any code for "updating" the tables and adding new stuff to them
// but there is code that does exactly that https://docs.mongodb.com/manual/reference/method/db.collection.updateOne/
//This code is deleting the databases completely and putting these in fresh.
//if you wanted to, you could remove the drop codes and you could start replicating these info multiple times as you run this multiple times

//db.createCollection("people") can be done to make a collection itself, but it does it automatically with the insert commands
//db.patients.insertOne({'patient_number_id': 4, 'First_Name': 'test', 'Last_Name': 'test', 'Street': 'M','City': 'D','State':'O','Zip':'12345'})
//example of one bit being inserted




// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.
//db.sales.drop();

// Insert a few documents into the sales collection.
/*db.sales.insertMany([
  { '_id': 1, 'item': 'abc', 'price': 10, 'quantity': 2, 'date': new Date('2014-03-01T08:00:00Z') },
  { '_id': 2, 'item': 'jkl', 'price': 20, 'quantity': 1, 'date': new Date('2014-03-01T09:00:00Z') },
  { '_id': 3, 'item': 'xyz', 'price': 5, 'quantity': 10, 'date': new Date('2014-03-15T09:00:00Z') },
  { '_id': 4, 'item': 'xyz', 'price': 5, 'quantity':  20, 'date': new Date('2014-04-04T11:21:39.736Z') },
  { '_id': 5, 'item': 'abc', 'price': 10, 'quantity': 10, 'date': new Date('2014-04-04T21:23:13.331Z') },
  { '_id': 6, 'item': 'def', 'price': 7.5, 'quantity': 5, 'date': new Date('2015-06-04T05:08:13Z') },
  { '_id': 7, 'item': 'def', 'price': 7.5, 'quantity': 10, 'date': new Date('2015-09-10T08:43:00Z') },
  { '_id': 8, 'item': 'abc', 'price': 10, 'quantity': 5, 'date': new Date('2016-02-06T20:20:13Z') },
]);

// Run a find command to view items sold on April 4th, 2014.
db.sales.find({ date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } });

// Build an aggregation to view total sales for each product in 2014.
const aggregation = [
  { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
  { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
];

// Run the aggregation and open a cursor to the results.
// Use toArray() to exhaust the cursor to return the whole result set.
// You can use hasNext()/next() to iterate through the cursor page by page.
db.sales.aggregate(aggregation);*/
